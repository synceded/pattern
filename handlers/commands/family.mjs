import { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } from 'discord.js';
import db from '../../db.mjs';

export async function handleFamily(interaction) {
  const subCommand = interaction.options.getSubcommand();

  if (subCommand === 'list') {
    const [rows] = await db.query('SELECT * FROM discord_families');
    const familyList = rows.length 
      ? rows.map(fam => `**<@&${fam.role_id}> [${fam.id}]**`).join("\n")
      : '–°–µ–º—å–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!';

    const embedFamilyList = new EmbedBuilder()
      .setTitle("üìÑ –°–ø–∏—Å–æ–∫ —Å–µ–º–µ–π —Å–µ—Ä–≤–µ—Ä–∞")
      .setDescription(familyList)
      .setColor("#00b0f4");

    await interaction.reply({ embeds: [embedFamilyList], ephemeral: true });

  } else if (subCommand === 'info') {
    const familyName = interaction.options.getString('fam');
    const [rows] = await db.query('SELECT * FROM discord_families WHERE name = ?', [familyName]);
    
    if (!rows.length) {
      const embedNotFound = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        .setColor('#ff0000');
      return await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
    }

    const familyData = rows[0];
    const createdAt = new Date(familyData.created_at);
    const [familyMembers] = await db.query('SELECT user_id FROM discord_family_members WHERE family_id = ?', [familyData.id]);
    const memberList = familyMembers.length
      ? await Promise.all(familyMembers.map(async (member) => {
        if (member.user_id && !isNaN(member.user_id)) return `<@${member.user_id}>`;
        return null;
      })).then(users => users.filter(user => user !== null).join("\n"))
      : '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';

    const embedFamilyInfo = new EmbedBuilder()
      .setTitle(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ: ${familyData.name} [${familyData.id}]`)
      .setDescription(`${familyData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'}\n\n**–õ–∏–¥–µ—Ä —Å–µ–º—å–∏:** <@${familyData.owner_id}>\n**–†–µ–ø—É—Ç–∞—Ü–∏—è —Å–µ–º—å–∏:** ${familyData.reputation} RP\n**–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n${memberList}`)
      .setColor("#00b0f4")
      .setFooter({ text: `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:` })
      .setTimestamp(createdAt);

    await interaction.reply({ embeds: [embedFamilyInfo], ephemeral: true });

  } else if (subCommand === 'invite') {
    const familyName = interaction.options.getString('fam');
    const user = interaction.options.getUser('user');
    const [rows] = await db.query('SELECT * FROM discord_families WHERE name = ?', [familyName]);
    
    if (!rows.length) {
      const embedNotFound = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        .setColor('#ff0000');
      return await interaction.reply({ embeds: [embedNotFound], ephemeral: true });
    }

    const familyData = rows[0];
    const [existingMember] = await db.query('SELECT * FROM discord_family_members WHERE user_id = ? AND family_id = ?', [user.id, familyData.id]);

    if (interaction.user.id !== familyData.owner_id) {
      const embedNotOwner = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —ç—Ç–æ–π —Å–µ–º—å–∏!')
        .setColor('#ff0000');
      return await interaction.reply({ embeds: [embedNotOwner], ephemeral: true });
    }

    if (existingMember.length) {
      const embedAlreadyMember = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription(`<@${user.id}> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —ç—Ç–æ–π —Å–µ–º—å–∏!`)
        .setColor('#ff0000');
      return await interaction.reply({ embeds: [embedAlreadyMember], ephemeral: true });
    }

    const embedInvite = new EmbedBuilder()
      .setTitle(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é ${familyData.name}`)
      .setDescription(`<@${user.id}>, –≤—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —Å–µ–º—å—é **${familyData.name}**.`)
      .setColor('#00b0f4');
    const buttons = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('accept_invite').setLabel('–ü—Ä–∏–Ω—è—Ç—å').setStyle(ButtonStyle.Success),
      new ButtonBuilder().setCustomId('decline_invite').setLabel('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è').setStyle(ButtonStyle.Danger)
    );

    await interaction.reply({ embeds: [embedInvite], ephemeral: true });
    const inviteMessage = await interaction.channel.send({
      content: `<@${user.id}>`,
      embeds: [embedInvite],
      components: [buttons],
    });

    const filter = (i) => i.user.id === user.id;
    const collector = inviteMessage.createMessageComponentCollector({ filter, time: 120000 });

    collector.on('collect', async (i) => {
      if (i.customId === 'accept_invite') {
        await db.query('INSERT INTO discord_family_members (user_id, family_id) VALUES (?, ?)', [user.id, familyData.id]);
        const role = interaction.guild.roles.cache.find((r) => r.name === familyData.name);
        if (role) {
          const member = await interaction.guild.members.fetch(user.id);
          await member.roles.add(role);
        }
        embedInvite.setDescription(`${user.tag} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é **${familyData.name}**!`).setColor('#00ff00');
        await i.update({ embeds: [embedInvite], components: [] });
      } else if (i.customId === 'decline_invite') {
        embedInvite.setDescription(`${user.tag} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é **${familyData.name}**.`).setColor('#ff0000');
        await i.update({ embeds: [embedInvite], components: [] });
      }
    });

    collector.on('end', async (_, reason) => {
      if (reason === 'time') {
        embedInvite.setDescription(`–í—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ${user.tag} –∏—Å—Ç–µ–∫–ª–æ.`).setColor('#808080');
        await inviteMessage.edit({ embeds: [embedInvite], components: [] });
      }
    });
  }
}

export async function handleAutocomplete(interaction) {
  if (!interaction.isAutocomplete()) return;

  const focusedValue = interaction.options.getFocused(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
  const [rows] = await db.query('SELECT * FROM discord_families');

  const filtered = rows
    .filter(familyData => familyData.name.toLowerCase().includes(focusedValue.toLowerCase())) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–≤–æ–¥—É
    .map(familyData => ({ name: `${familyData.name} [${familyData.id}]`, value: familyData.name })); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è autocomplete

  await interaction.respond(filtered.slice(0, 25)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 25 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
}
