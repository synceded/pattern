import { EmbedBuilder } from 'discord.js';
import db from '../../db.mjs';

export async function handleBinaryOption(interaction) {
  const direction = interaction.options.getString('direction');
  const amount = interaction.options.getInteger('amount');

  const [rows] = await db.query('SELECT dp FROM discord_profiles WHERE user_id = ?', [interaction.user.id]);
  const profile = rows[0];

  if (!profile || profile.dp < amount) {
    return await interaction.reply({
      content: '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!',
      ephemeral: true,
    });
  }

  // –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à)
  const isWin = Math.random() < 0.5;
  const multiplier = 0.088; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞
  const courseChange = generateCourseChange();
  let resultMessage, finalColor;

  if (isWin && direction === courseChange.finalDirection) {
    const winAmount = amount * multiplier;
    const roundedWinAmount = Math.round(winAmount * 100) / 100;
    await db.query('UPDATE discord_profiles SET dp = ? WHERE user_id = ?', [profile.dp + roundedWinAmount, interaction.user.id]);
    resultMessage = `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: **${roundedWinAmount} DP**. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **${direction.toUpperCase()}**.`;
    finalColor = '#00ff00';
  } else {
    await db.query('UPDATE discord_profiles SET dp = ? WHERE user_id = ?', [profile.dp - amount, interaction.user.id]);
    resultMessage = `üíî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –°—Ç–∞–≤–∫–∞: **${amount} DP**. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: **${direction.toUpperCase()}**.`;
    finalColor = '#ff0000';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Embed –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const embed = new EmbedBuilder()
    .setTitle('üìä ¬´–ë–∏–Ω–∞—Ä–Ω—ã–π –æ–ø—Ü–∏–æ–Ω¬ª')
    .setDescription('–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:\n' + courseChange.visual)
    .setColor('#ffcc00'); // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç, –ø–æ–∫–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∏–¥–µ—Ç

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–±–µ–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
  const msg = await interaction.reply({
    embeds: [embed],
    ephemeral: false,
  });

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏ –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞
  const interval = setInterval(() => {
    let visual = '';
    for (let i = 0; i < 4; i++) {
      const current = Math.random() < 0.5 ? 'üìà' : 'üìâ';
      visual += ` ${current}`;
    }
    embed.setDescription(`–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:\n${visual}`);

    msg.edit({ embeds: [embed] });
  }, 500); // –ö–∞–∂–¥—ã–π 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º

  // –ü–æ—Å–ª–µ 6 —Å–µ–∫—É–Ω–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  setTimeout(async () => {
    clearInterval(interval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é

    // –§–∏–Ω–∞–ª—å–Ω—ã–π Embed —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    embed.setDescription(
      `–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:\n${courseChange.visual}\n\n${resultMessage}`
    )
    .setColor(finalColor);

    await msg.edit({ embeds: [embed] });
  }, 6000); // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 6 —Å–µ–∫—É–Ω–¥
}

function generateCourseChange() {
  const directions = ['üìà', 'üìâ'];
  let visual = '';
  let finalDirection = directions[Math.floor(Math.random() * directions.length)];

  for (let i = 0; i < 4; i++) {
    const current = directions[Math.floor(Math.random() * directions.length)];
    visual += ` ${current}`;
    if (i === 3) finalDirection = current === 'üìà' ? 'up' : 'down';
  }

  return { visual: visual.trim(), finalDirection };
}
